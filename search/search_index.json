{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the IBM Cloud Satellite Technology Sales Enablement Level 3 demonstration guide. The goal of this demonstration guide is to provide IBM and Business Partner Sales and Technical Sales the knowledge and tools to perform introductory demonstrations of IBM Cloud Satellite. Please read all sections of this document! Skipping any section of this demonstration guide will impact the ability to successfully complete the IBM Cloud Satellite Technology Sales Enablement Level 3. There are 4 parts to this demonstration guide as seen in the left hand navigation: Part 1 - Setup Learn about the environment that will be utilized for this learning activity, the prerequisites required, and how to create a reservation for the environment in IBM Technology Zone (ITZ). Part 2 - Provisioning and configuring IBM Cloud Satellite Learn about the provisioning process for IBM Cloud Satellite Locations , Satellite-enabled Services , and Link endpoints by exploring the pre-provisioned ITZ environment. Note, in this activity a new IBM Cloud Satellite Location will NOT be provisioned. Rather, a shared, pre-provisioned Satellite Location and cloud-enabled service (Red Hat OpenShift on IBM Cloud) will be utilized. Videos are provided that demonstrate the provisioning processes for these resources. Part 3 - Satellite Config Learn about Satellite Config and how it is used to easily deploy Kubernetes resources to Red Hat OpenShift clusters maintained in a GitHub repository. Part 4 - The demonstration In the final section, learn how to demonstrate to client's some of the value of IBM Cloud Satellite. Guidance on performing a client demonstration using the shared ITZ environment is provided that illustrates how IBM Cloud Satellite and Satellite-enabled services are provisioned, and how Satellite Config can be used to deploy and manage Kubernetes resources easily and consistently. Some content will be labeled as Required for technical sales only . However, individuals in sales roles are encouraged to complete these sections and include them in their demonstrations. Step-by-step directions are provided, but some technical knowledge and experience with source control systems like GitHub and basic Yet Another Markup Language (YAML) is assumed. Important Note: most images and videos used in this demonstration guide were created in June 2023. There may be differences between these images and videos than the current IBM Cloud Portal, Red Hat OpenShift web console, and other user interfaces shown. Some recorded videos were recorded prior to June 2023. Helpful tips for using this demonstration environment Throughout the lab, you will see images that are examples of what you should be seeing in the IBM Cloud Portal, Red Hat OpenShift web console, and other web pages and tools used in this guide. The following styles of highlighting is used: Action highlight box: Illustrates where to click, enter, or select an item: Path/explore highlight box: Illustrates one of two things: the path to follow to get to a specific location in the user interface areas to explore","title":"Overview"},{"location":"#helpful-tips-for-using-this-demonstration-environment","text":"Throughout the lab, you will see images that are examples of what you should be seeing in the IBM Cloud Portal, Red Hat OpenShift web console, and other web pages and tools used in this guide. The following styles of highlighting is used: Action highlight box: Illustrates where to click, enter, or select an item: Path/explore highlight box: Illustrates one of two things: the path to follow to get to a specific location in the user interface areas to explore","title":"Helpful tips for using this demonstration environment"},{"location":"NextSteps/","text":"Congratulations! At this point, you should now be ready to demonstrate some of the many values of IBM Cloud Satellite to clients. To complete the IBM Cloud Satellite Level 3 badge, do one of the following: IBM employees: Return the the IBM Cloud Satellite Level 3 learning plan in YourLearning and mark the IBM Cloud Satellite Demonstration Guide activity complete. Next, review the Stand and Deliver evaluation checklist. The checklist provides the evaluation criteria managers will use when reviewing your Stand and Deliver. And then, once you have practiced and are ready, record your Stand and Deliver video and submit it for review. Upon a positive review by management (or designated individuals), you will have completed the requirements for the IBM Cloud Satellite Level 3 badge. Business Partners: Return the the IBM Cloud Satellite Level 3 learning plan in IBM Training Digital Learning Platform (learn.ibm.com) and mark the IBM Cloud Satellite Demonstration Guide activity complete. Next, you must take a very short, 5 question quiz regarding the activity just completed. Upon passing the quiz, you will have completed the requirements for the IBM Cloud Satellite Level 3 badge. Think you've recorded a great demonstration based upon this activity and want to share it with others? Please share with the author of this activity (email and Slack addresses are shown below) for possible inclusion in updates to this demonstration guide. Thank you for your participation. Feedback on this activity is greatly appreciated. Feedback can be left on the respective learning platforms mentioned above, in the #cloud-platform-demo-feedback Slack channel (may only be accessible to IBMers), in the IBM Technology Zone collection, or email directly to the author: andrewj@us.ibm.com .","title":"Next Steps"},{"location":"1setup/01.01%20Introduction/","text":"IBM Cloud Satellite is an extension of IBM Cloud that can run inside a client's data center, at the edge, in public clouds, or any location of the client\u2019s choice. IBM Cloud Satellite is a managed, distributed cloud solution that delivers cloud services, Application Programming Interfaces (APIs), access policies, security controls, and compliance. This activity utilizes a shared IBM Technology Zone (ITZ) demonstration environment. The environment consists of a single IBM Cloud Satellite Location and two (2) Red Hat OpenShift on IBM Cloud clusters as illustrated below. Everyone taking the IBM Cloud Satellite Level 3 course utilizes this single, shared ITZ environment. In this demonstration environment, full access to the IBM Cloud Satellite capabilities is NOT provided. Users are restricted to specific capabilities controlled by IBM Cloud Identify Access and Management (IAM) roles and policies. Users will NOT have permission to: create new Satellite Locations, Clusters, Cluster Groups, or Configurations deploy new IBM Cloud Services (for example: IBM Cloud Databases, Key Protect, etc.) Warning Attempting to perform an action that you do not have permissions for will result in an error message like the one below. This is not an issue with the IBM Cloud or IBM Cloud Satellite, rather a restriction of the demo environment and the permissions assigned to users. Important The focus of the demonstration is on the Infrastructure as a Service capability of IBM Cloud Satellite and not on the specific services deployed to a Satellite Location (for example, Red Hat OpenShift on IBM Cloud). Provisioning a Satellite Location on a public cloud like AWS, is automated and typically takes 25-30 minutes depending on the cloud provider, configuration of the servers being used, and other factors. Deploying Red Hat OpenShift on IBM Cloud to the Satellite Location usually takes another 30-45 minutes. In addition, to easily access resources on those servers you would need to either create a Virtual Private Network or manually make network configuration changes. This can be time consuming and error prone and will typically take longer than most clients are willing to sit through for a demonstration. In this demonstration asset, an IBM Cloud Satellite environment has already been provisioned for you.","title":"The environment"},{"location":"1setup/01.02%20Pre-requisites/","text":"To complete this activity you will need: User account for IBM Cloud (IBM ID) User account for GitHub or IBM's Enterprise GitHub ( Required for technical sales only ). To create an user account in IBM's Enterprise GitHub, go here . To create a user account in GitHub, go here (an enterprise GitHub account is NOT required). Access to IBM Technology Zone (ITZ) IBM Employees In most cases, an IBM intranet user ID will suffice. If issues are encountered while authenticating to IBM Technology Zone (ITZ) or IBM Cloud they will need to be resolved prior to proceeding. Contact the IBM, IBM Cloud, or ITZ help desk for assistance. Business Partners If you are unable to access IBM Technology Zone (ITZ) or IBM Cloud , please contact your IBM partner representative for support.","title":"Pre-requisites"},{"location":"1setup/01.02%20Pre-requisites/#ibm-employees","text":"In most cases, an IBM intranet user ID will suffice. If issues are encountered while authenticating to IBM Technology Zone (ITZ) or IBM Cloud they will need to be resolved prior to proceeding. Contact the IBM, IBM Cloud, or ITZ help desk for assistance.","title":"IBM Employees"},{"location":"1setup/01.02%20Pre-requisites/#business-partners","text":"If you are unable to access IBM Technology Zone (ITZ) or IBM Cloud , please contact your IBM partner representative for support.","title":"Business Partners"},{"location":"1setup/01.03%20CreateReservation/","text":"As mentioned earlier, this activity requires a reservation for the IBM Technology Zone (ITZ) IBM Cloud Satellite - Level 3 demonstration environment. The full collection can be accessed here . From the collection page, click the \"Complete learning activity for...\" link in left hand menu bar to view all the resources for the collection. To make a reservation for the shared environment, click the Demonstration Environment: IBM Cloud Satellite - Level 3 tile or go here . Plan your time! While it will take approximately 4 hours to complete all sections of this activity once the reservation is ready, additional time may be needed to practice the demonstration script, complete the required Stand and Deliver (IBM employees), complete the business partner quiz (partners only), or to perform an actual client demonstration. A reservation can be made for immediate use by selecting Reserve now , or for future access using the Schedule for later option. When completing the reservation form, select Practice/Self-Education from the Purpose pull-down menu and specify Level 3 Training in the Purpose description field. The ITZ policy for this environment is a 2 day reservation that can be extended for a maximum of 6 days. Note, if you select a different Purpose option, the default duration for the reservation will vary (as short as 12 hours). If you are performing a client demonstration, select Customer Demo and provide a Sales Opportunity number . The environment reservation will go through a provisioning process and then it should move to a Ready state. Several e-mails should be received during this process. Review the emails received. One will be from IBM Cloud with the title Account: You are invited to join an account in IBM Cloud . Within the content of the email is a link to Join Now . Click the link and then Accept the invitation on the IBM Cloud portal. Did not get an e-mail from IBM Cloud? If you did not receive an e-mail from IBM Cloud inviting you to join the 2435442 - ITZ - Satellite, but you did receive a notification from ITZ that your environment was ready, try the following: Log into cloud.ibm.com using your IBM Cloud ID. Click the . Look for a new notification with the subject: Action required: You are invited to join an account in IBM Cloud . Click on the notification and then click the Join now link. If you do not see a notification or an e-mail, try deleting the existing reservation in ITZ and try creating a new one. If that doesn't work, open a support ticket in the ITZ ticketing system . Include the reservation ID and summarize the problem in your message. This environment not suitable for Proof-of-Concept (PoC), Proof-of-Technology (PoT), or Proof-of-Experience (PoX) activities! As this is a shared environment that provides limited access, this environment should NOT be used for PoCs, PoTs, or PoXs. Other ITZ environments or IBM Cloud trial accounts are available for those types of activities, simply search for Satellite in the ITZ portal . Additionally, there are two (2) valuable assets that can help quickly setup IBM Cloud Satellite demo environments in your own cloud account (charges will apply). At this time, these repositories and Slack channel are only available to internal IBMers. Use the #try-sat-friends Slack channel to communicate to the owner and the users of these assets. Try-Sat - https://github.ibm.com/garage-satellite-guild/try-sat This project provides a full terraform config for creating a Satellite location in an IBM Cloud VPC and installing a Red Hat OpenShift on IBM Cloud cluster into the location, all in a single terraform config. It is great for quickly setting up a scenario that can be used in client demonstrations. Try-Sat-Stack - https://github.ibm.com/drschrag/try-sat-stack This project takes much of its content from try-sat, but instead provides a layered approach to creating a full Red Hat OpenShift on IBM Cloud on Satellite environment. This allows the install to stop at any point and just create a Satellite location, or stop at the point when control plane nodes are assigned but a ROKS cluster is not yet created. It also is very configurable with variables to specify what gets created. Proceed to the next section to learn about provisioning IBM Cloud Satellite Locations, Services, and Link endpoints.","title":"Create environment reservation"},{"location":"2provisioning/02.01%20Locations/","text":"The first step to utilize IBM Cloud Satellite is to create a Location . A Location is a representation of an environment in a client's choice of infrastructure, such as an on-premises data center or public cloud. Below is a high-level architectural view of a Satellite Location. Creating a Satellite Location can be achieved through the IBM Cloud Portal, via the IBM Cloud Satellite command line interfaces, or application programming interfaces (APIs). For other public cloud providers, IBM Cloud Satellite provides automation via IBM Cloud Schematics to set up the Location. For on-premises deployments, scripts are provided that will need to be executed on each of the target host machines. Planning for the creation of a Location is critical. Detailed planning information is provided in the IBM Cloud Satellite documentation in the Planning your environment for Satellite section. There are many requirements associated with creating a Satellite Location including minimum host requirements (operating system, CPU, memory, storage, etc.) and minimum network latency between Satellite Location hosts and IBM Cloud data centers. To learn more about Satellite Locations, refer to the Satellite Location product documentation: https://cloud.ibm.com/docs/satellite?topic=satellite-locations . The image below is from the IBM Cloud Portal . There are tiles that provide a wizard-based creation process for 3rd party cloud providers as well as on-premises, edge, and advanced configurations. Provisioning a location in 3rd party cloud provider Permission to perform these steps are not provided in the ITZ demonstration environment. The steps are detailed here to completeness. If users have their own AWS account, they can follow along; however, any charges incurred are the responsibility of the user. Users should stop before actually provisioning resources. The Terraform-based creation wizards for 3rd party cloud providers first prompt users for credentials for the users account in the 3rd party cloud. An example is shown below for Amazon Web Services (AWS). Once credentials are provided, prompts are provided for completing the required information to provision the Location. These include: The data center or region in the 3rd party provider where the Location should be created. The number and hardware configuration (CPU, Memory, Storage) of the virtual servers that will be provisioned for the location. And the IBM Cloud Object Storage bucket that will be used to store information about the Location. ofr The video below shows the provisioning of an IBM Cloud Satellite Location in AWS. The video has been edited to minimize the viewing time and does not reflect the actual provisioning time of a Satellite Location. The actual provisioning time (from clicking \"Create location\" to the Location being ready) will vary. When this video was created, it took approximately 25 minutes for the 12 hosts to be provisioned in AWS and configured as a Satellite Location. Watch this video to understand the talking points when describing the provisioning process. Tip If the video appears blurry, click the full screen or icon. Don't like the green highlights in the video above? This is the same video without audio or the highlights. type:video On-premises or edge Provisioning a Location in a client's datacenter or edge location is accomplished through customized scripts. These scripts can be run manually or incorporated in automation tools like Schematics. Once all the planning is complete and hardware that meets the required Satellite specifications is available, the high-level process to create a Location is: Create the Location using the IBM Cloud Portal or command line interface Generate and download the host attach script using the IBM Cloud Portal or command line interface Copy and run the host attach script on each local physical or virtual server Assign hosts to the location control pane Assign additional hosts to various satellite-enabled services (e.g RedHat OpenShift on IBM Cloud, Cloud Object Storage, Event Streams, etc.) A more detailed explanation of these steps can be found here in the product documentation. Watch this video to understand the talking points when describing the provisioning process. The video also covers provisioning a Satellite-enabled service which is the topic of the next chapter of this activity. Tip If the video appears blurry, click the full screen or icon. More about the ITZ environment used in this activity As mentioned earlier, this activity utilizes a shared, pre-provisioned IBM Cloud Satellite Location. The Satellite location is deployed on a set of VMware-based virtual servers that are actually running in a IBM Cloud for VMware vCenter Server (VCS) environment. This deployment model is only supported for testing purposes, however, it mimics one of the most common deployment models for IBM Cloud Satellite which is a set of VMware-based virtual machines running in a client's datacenter. Before proceeding A reservation for the IBM Cloud Satellite Level 3 IBM Technology Zone (ITZ) environment must be available and in the Ready state before proceeding. Once requested, the reservation takes approximately 15 minutes to provision. Upon completion, an e-mail is sent and the reservation appears in the ready state on the ITZ My reservations page. The information contained in the email and reservation detail page is required to proceed to the next section. The pre-provisioned Location used for this activity is located in the ITZ Cloud account called 2435442 - ITZ - Satellite and is called yl-l3-vmware . To view the Location details, follow these steps: Login to the IBM Cloud portal here: https://cloud.ibm.com . Once authenticated, change to the 2435442 - ITZ - Satellite . Don't see the 2435442 - ITZ - Satellite? Verify the ITZ reservation is in the Ready state and the invitation to join the account has been accepted. Refer to the Create environment reservation chapter in the previous section of the demonstration guide. Navigate to the Satellite Location page by clicking the hamburger menu icon at top left, selecting Satellite and then Locations . Locate and click on the yl-l3-vmware in the Locations table. Finding the correct location This ITZ cloud account is used by many different ITZ environments. If the yl-l3-vmware location is not visible in the table, use the table's search or sort feature to find it. Explore the details of the Location including the Overview and Hosts views. On the Hosts page, click the Attach host + button. Here is where administrators come to generate and download the shell script to add hosts to the location. This is done when provisioning the control plane as well as additional servers needed for cloud-enabled services. In this ITZ environment, users do NOT have permission to generate the script. If the audience is very technical and would like to see the script, here . Continue to the next section to learn about IBM Cloud Satellite-enabled services.","title":"Locations"},{"location":"2provisioning/02.01%20Locations/#provisioning-a-location-in-3rd-party-cloud-provider","text":"Permission to perform these steps are not provided in the ITZ demonstration environment. The steps are detailed here to completeness. If users have their own AWS account, they can follow along; however, any charges incurred are the responsibility of the user. Users should stop before actually provisioning resources. The Terraform-based creation wizards for 3rd party cloud providers first prompt users for credentials for the users account in the 3rd party cloud. An example is shown below for Amazon Web Services (AWS). Once credentials are provided, prompts are provided for completing the required information to provision the Location. These include: The data center or region in the 3rd party provider where the Location should be created. The number and hardware configuration (CPU, Memory, Storage) of the virtual servers that will be provisioned for the location. And the IBM Cloud Object Storage bucket that will be used to store information about the Location. ofr The video below shows the provisioning of an IBM Cloud Satellite Location in AWS. The video has been edited to minimize the viewing time and does not reflect the actual provisioning time of a Satellite Location. The actual provisioning time (from clicking \"Create location\" to the Location being ready) will vary. When this video was created, it took approximately 25 minutes for the 12 hosts to be provisioned in AWS and configured as a Satellite Location. Watch this video to understand the talking points when describing the provisioning process. Tip If the video appears blurry, click the full screen or icon. Don't like the green highlights in the video above? This is the same video without audio or the highlights. type:video","title":"Provisioning a location in 3rd party cloud provider"},{"location":"2provisioning/02.01%20Locations/#on-premises-or-edge","text":"Provisioning a Location in a client's datacenter or edge location is accomplished through customized scripts. These scripts can be run manually or incorporated in automation tools like Schematics. Once all the planning is complete and hardware that meets the required Satellite specifications is available, the high-level process to create a Location is: Create the Location using the IBM Cloud Portal or command line interface Generate and download the host attach script using the IBM Cloud Portal or command line interface Copy and run the host attach script on each local physical or virtual server Assign hosts to the location control pane Assign additional hosts to various satellite-enabled services (e.g RedHat OpenShift on IBM Cloud, Cloud Object Storage, Event Streams, etc.) A more detailed explanation of these steps can be found here in the product documentation. Watch this video to understand the talking points when describing the provisioning process. The video also covers provisioning a Satellite-enabled service which is the topic of the next chapter of this activity. Tip If the video appears blurry, click the full screen or icon.","title":"On-premises or edge"},{"location":"2provisioning/02.01%20Locations/#more-about-the-itz-environment-used-in-this-activity","text":"As mentioned earlier, this activity utilizes a shared, pre-provisioned IBM Cloud Satellite Location. The Satellite location is deployed on a set of VMware-based virtual servers that are actually running in a IBM Cloud for VMware vCenter Server (VCS) environment. This deployment model is only supported for testing purposes, however, it mimics one of the most common deployment models for IBM Cloud Satellite which is a set of VMware-based virtual machines running in a client's datacenter. Before proceeding A reservation for the IBM Cloud Satellite Level 3 IBM Technology Zone (ITZ) environment must be available and in the Ready state before proceeding. Once requested, the reservation takes approximately 15 minutes to provision. Upon completion, an e-mail is sent and the reservation appears in the ready state on the ITZ My reservations page. The information contained in the email and reservation detail page is required to proceed to the next section. The pre-provisioned Location used for this activity is located in the ITZ Cloud account called 2435442 - ITZ - Satellite and is called yl-l3-vmware . To view the Location details, follow these steps: Login to the IBM Cloud portal here: https://cloud.ibm.com . Once authenticated, change to the 2435442 - ITZ - Satellite . Don't see the 2435442 - ITZ - Satellite? Verify the ITZ reservation is in the Ready state and the invitation to join the account has been accepted. Refer to the Create environment reservation chapter in the previous section of the demonstration guide. Navigate to the Satellite Location page by clicking the hamburger menu icon at top left, selecting Satellite and then Locations . Locate and click on the yl-l3-vmware in the Locations table. Finding the correct location This ITZ cloud account is used by many different ITZ environments. If the yl-l3-vmware location is not visible in the table, use the table's search or sort feature to find it. Explore the details of the Location including the Overview and Hosts views. On the Hosts page, click the Attach host + button. Here is where administrators come to generate and download the shell script to add hosts to the location. This is done when provisioning the control plane as well as additional servers needed for cloud-enabled services. In this ITZ environment, users do NOT have permission to generate the script. If the audience is very technical and would like to see the script, here . Continue to the next section to learn about IBM Cloud Satellite-enabled services.","title":"More about the ITZ environment used in this activity"},{"location":"2provisioning/02.02%20Services/","text":"Many IBM Cloud services are enabled for IBM Cloud Satellite including IBM Cloud databases, IBM Event Streams, IBM Key Protect, Red Hat OpenShift on IBM Cloud, and others. In the future, more services will be enabled for IBM Cloud Satellite. For a full list of Satellite-enabled services, use the IBM Cloud Portal as described below, or check out the documentation page Supported Satellite-enabled IBM Cloud services . To successfully deploy any satellite-enabled service, hosts must be available and unassigned at the Location. As seen in the previous chapter about Locations, all the hosts at the yl-l3-vmware are already assigned either to the Location control plane, or an already deployed Red Hat OpenShift on IBM Cloud cluster. Continuing from the previous chapter on Locations, in the steps below, explore how Red Hat OpenShift on IBM Cloud is deployed to a Location. Click the Services link on the yl-l3-vmware page in the IBM Cloud Portal Review the already deployed services, and then click the Create services + button. Review the list of available services, and then click the Red Hat OpenShift on IBM Cloud tile. Explore the Red Hat OpenShift cluster provisioning page in the IBM Cloud Portal. The image above is only part of the provisioning page. Notice how the Satellite tile under the Infrastructure section, the Resource group , and the yl-l3-vmware Location under the Locations section have been pre-selected. Scroll down to see the other parameters required to provision the OpenShift cluster. Notice the Minimum host requirements are not met warning. This is identifying the fact no unassigned hosts are available in the yl-l3-vmware . If unassigned hosts were available for the specified worker pool configuration, the Create button at the far right of the page would be enabled. Continue to scroll further in the dialog. Take special notice of the Satellite Config section. Satellite Config will be covered in more detail later in this guide. For now, note that in order to use Satellite Config to deploy Kubernetes resources to the cluster, it must be enabled at the time the cluster is created or a manual script must be run later. As mentioned earlier, an OpenShift cluster has already been deployed to the yl-l3-vmware Location. The deployment of the cluster took approximately 30 minutes. Return to the Location details page by clicking on the browsers back button or clicking here . At this time, feel free to explore the other Satellite-enabled services before proceeding to the next chapter to learn about Link Endpoints .","title":"Satellite-enabled services"},{"location":"2provisioning/02.03%20LinkEndpoints/","text":"Networking is a critical aspect of a IBM Cloud Satellite deployment and should be diligently planned. The product documentation provides detailed guidance on host network requirements, outbound connectivity from the Location datacenter to IBM Cloud, and additional details. To learn more, start here . IBM Cloud Satellite Link endpoints provide controls for network traffic to and from a Satellite Location and services, servers, and/or applications that run outside of the Location. Satellite Link endpoints allow software that runs in a Satellite location to connect to a service, server, or application that runs outside of the Satellite Location. Links can also allow software that is connected to the IBM Cloud private network to connect to a service, server, or application that runs in your Satellite Location. To establish the connection, the destination resource's fully qualified domain name (FQDN) or IP address, port, the connection protocol, and any authentication methods at the endpoint must be specified. The endpoint is registered with the Satellite Link component of the Location's Satellite control plane. To help maintain enterprise security and audit compliance, Satellite Link endpoints provide additional built-in controls to restrict client access to endpoints, and to log and audit traffic that flows over endpoints. While Satellite Links are not used explicitly in this demonstration, there are Link endpoints defined in the shared ITZ environment, and are an important concept to understand. For more information on Links, read the documentation here . In the following steps, learn more about Link endpoints . If not already open in a browser, return to the Location details page by clicking here . Click Link endpoints in the left-hand navigation pane. Review the Integrations that are available between IBM Cloud Satellite and IBM Cloud logging, monitoring, and event tracking services. Note, access to these integrated services is not provided in this shared ITZ environment. These are used by ITZ to monitor the health of the environment. However, the availability of these integrations is a critical benefit of IBM Cloud Satellite for clients and provide logging, monitoring, and event tracking capabilities the most clients will expect. Click the System endpoints tab. Review the configured System endpoints . These endpoints control access between the Satellite Location and other IBM Cloud services like logging, monitoring, and IBM Cloud Object Storage. Notice the 2 different values under Destination type in the table. Cloud endpoint By default, source clients in a Satellite location cannot reach destination resources that run outside of the location because the destination resource's IP address is not routable from within the location. A Cloud endpoint enables resources running in the Location to reach outside resources. Location endpoint By default, source clients that are connected to the IBM Cloud private network cannot reach destination resources that run in a Satellite Location because the destination resource's IP address is not routable from outside the location. Location endpoints allow outside resources to reach resources running inside the Location. Proceed to the next section to learn about IBM Cloud Satellite Config and how it is used to deploy Kubernetes resources to OpenShift clusters managed by IBM Cloud Satellite.","title":"Link endpoints"},{"location":"3config/03.01%20IntroAndTerms/","text":"IBM Cloud Satellite provides the ability to deploy Kubernetes resources to Red Hat OpenShift on IBM Cloud clusters that run in IBM Cloud, IBM Cloud Satellite Locations, and on-premises. This capability is called Satellite Config . Learn more about Satellite Config here . Satellite Config is a continuous delivery tool based on the Razee open source project. Learn more about Razee here . To fully understand and use Satellite Config it is important to know a few more terms: Clusters The previous chapter discussed deploying a Red Hat OpenShift on IBM Cloud cluster to a Satellite Location and how during that process the option to enable Satellite Config to access that cluster. In addition, IBM Cloud Satellite provides the ability for Satellite Config to access other OpenShift cluster's running on IBM Cloud. This is accomplished by manually registering the cluster with Satellite Config . Registering clusters is a two step process. The first is to register the cluster with Satellite Config through the IBM Cloud Portal or command line interface. This will create a record in the Satellite Config configuration data store (ConfigMap) and generate a command line that will need to be executed on the OpenShift cluster. Step 2, a user with administrative privileges on the OpenShit cluster will need to execute the generated command line. The command creates the razeedeploy project, custom resource definitions, and role-based access control (RBAC) policies on the cluster that are required to make the cluster visible to Satellite Config. Cluster groups A cluster group specifies a set of OpenShift clusters that are registered with Satellite Config. A cluster group consists of one or more registered clusters that can reside in different Satellite Locations or IBM Cloud. Configuration A Satellite configuration, also referred to as Config , is a continuous delivery tool that is used to consistently roll out versions of Kubernetes resources across cluster groups. For more information, see Deploying Red Hat OpenShift resources across clusters with Satellite configurations . Version A version represents a Kubernetes resource file that is uploaded or manually created in a Config . The version can include any Kubernetes resource definition and a configuration can have any number of versions. Kubernetes uses YAML (Yet Another Markup Language) for resource files. For help developing a Kubernetes YAML resource file, see Developing apps to run on OpenShift . Subscription A Satellite subscription is created for a Config and specifies which version of the Kubernetes resource is to be deployed to one or more cluster groups. Source repository A source repository can be thought of as a datastore for different resource definitions (like a version) of YAML files (and more). Satellite Config supports both GitHub and GitLab as source repositories. In this activity, GitHub is used as the source repository. Satellite Config supports two models for creating configurations. One is a GitOps-based configuration which utilizes a source repository. GitOps is an operational framework that takes Development and Operations (DevOps) best practices used for application development such as version control, collaboration, compliance, and Continuous Integration/Continuous Deployment (CI/CD), and applies them to infrastructure automation. The other is a Direct Upload model where a version file is created or uploaded directly into the configuration via the IBM Cloud Portal or command line utilities. In this activity, the focus will be on the GitOps-based model. Subscriptions will be created in a configuration that will deploy resources stored in GitHub. After an initial deployment, if the resources change in GitHub, they are automatically deployed by Satellite Config . This process is illustrated in the diagram below. This demonstration using GitHub is borrowed from the Deploying apps to clusters with Satellite Config tutorial in the IBM Cloud Satellite documentation. Before creating a configuration using the Satellite Config GitOps model, a source repository will need to be created along with a sample application.","title":"What is Sat Config"},{"location":"3config/03.02%20SetupGitHub/","text":"Before proceeding A reservation for the IBM Cloud Satellite Level 3 IBM Technology Zone (ITZ) environment must be available and in the Ready state before proceeding. Once requested, the reservation takes approximately 15 minutes to provision. Upon completion, an e-mail is sent and the reservation appears in the ready state on the ITZ My reservations page. The information contained in the email and reservation detail page is required to proceed to the next section. Required for technical sales only The steps below are required for technical sales only , however, all are highly encouraged to complete all sections. The steps below were carefully written to allow even the most novice GitHub users to complete the activity. With a GitHub (or IBM Enterprise GitHub) user account, all should be able to follow along. No Git specific knowledge is required as the steps to be completed can all be done so using the GitHub browser interface. To learn more about GitHub check out these resources: GitHub Fundamentals For a very basic Git and GitHub tutorial, check out this Git Tutorial for Dummies . To complete the exercise, utilize either a public GitHub identification, or for IBM employees, an IBM Enterprise GitHub ID. The directions below are based on using a public GitHub identification. In the next steps a copy of an existing sample application will be created in the users GitHub account and modified to meet the requirements of this demonstration and the associated ITZ environment. Log in to GitHub by opening a browser window to https://github.com/login . Note If you do not already have a GitHub user ID, you can create a free one by clicking the Create an account link on the sign in page. Open a browser window to https://github.com/IBM/satellite-config-example . Click the Fork button. Uncheck the Copy the main branch only checkbox and click Create fork . The browser should redirect to the new repository in your GitHub workspace. Select the config-sample-dev branch in the branch pull-down menu. Click the deployments folder. Next, update each of the four (4) YAML files with the namespace created specifically for you in the ITZ environment. The namespace value is found on the ITZ reservation page (see the example below) or in the e-mail sent by ITZ for the reservation. The value will be in the format \"######ABCD-se-l3\". In the images below \"2700039nft-se-l3\" are used, but you must use your specific namespace value in order to successfully complete this exercise . Why am I doing this? Because the ITZ environment is shared by all users of this demonstration guide, a common namespace cannot be used or else users would overwrite each other and cause issues when attempting to follow the instructions. Each ITZ reservation sets up a unique namespace for each user. By changing this value in the deployment YAML files for the sample application, each user is able to deploy their own copy of the application in the OpenShift clusters managed by IBM Cloud Satellite. Sample ITZ reservation page: Sample ITZ e-mail: Click the 1-helloworld-namespace.yaml file in the deployments directory. Edit the file by clicking the pencil icon. Change the value of the name field to the name of your ITZ-created namespace, remove the name: satellite-config-sample line under the labels section, and add the line deploy.razee.io/mode: \"EnsureExists\" under the labels section as shown below. Formatting in YAML is important The YAML language is very sensitive to formatting. Make sure each line aligns as illustrated in the image above. Use spaces and not tabs (2 spaces before name: and labels: and 4 spaces before deploy.razee.io/mode: ). Because the namespace is already created for you by the ITZ reservation, the deploy.razee.io/mode: \"EnsureExists\" label tells Satellite config to ignore this step if the namespace already exists. Click Commit changes... . Update the Commit message text field with an appropriate message and then click the Commit changes button. Click deployments to navigate back to the list of YAML files. Next, the other three (3) YAML files need to be updated. For each of these, only the namespace field needs to be updated. The next set of steps walk you through updating one of the files, but you must do it for all three files: 2-helloworld-deployment.yaml 3-helloworld-route.yaml 4-helloworld-svc.yaml Click the 2-helloworld-deployment.yaml file name. Edit the file by clicking the pencil icon. Change the namespace field from satellite-config-sample to your ITZ specific namespace value. Do not use 2700039nft-se-l3 You must use the namespace name created specifically for you as shown in your ITZ reservation! Click the Commit changes... button. Update the Commit message text field with an appropriate message and then click the Commit changes button. Click deployments to navigate back to the list of YAML files. Repeat steps 13-18 for each of the other 2 files in the deployments directory: 3-helloworld-route.yaml 4-helloworld-svc.yaml For this demonstration, 2 branches in GitHub are used: config-sample-dev and config-sample-prod. The changes just made in the config-sample-dev branch need to be made in the config-sample-prod branch as well. This can be done manually using the steps above, or a pull request can be completed to copy all changes from one branch to the other. This process will be used in the demonstration as well, so instead of manually making the changes, practice doing a pull request. Click the Pull requests link at the top of the GitHub page. Click the New pull request button. Change the base repository field from IBM/satellite-config-example to your GitHub fork of the repository. Select your repository fork!!! The default selection is the original IBM/satellite-config-example. You MUST select your repository instead of the default or \"andrewjones-tx/satellite\". Change the base field from main to *config-sample-prod and the compare field from main to config-sample-dev *. This will tell GitHub to pull all changes in the *config-sample-dev branch into the config-sample-prod * branch. Verify the pull request can be merged, and click Create pull request . Enter a comment for the request and click Create pull request . Review the changes that are being made with the pull request and click Merge pull request . Click Confirm merge to perform the merging of the dev and prod branches. Verify the changes in the prod branch. Click the <> Code link and then change the branch pulldown menu to config-sample-prod . Notice the status above the table. It should reflect the recent merge of the pull request. The changes can also be viewed by clicking the deployments directory and viewing the individual YAML files. To summarize, at this point a copy (fork) of the sample code was made to your personal repository. Updates to the associated YAML files were made to work in the shared ITZ environment for this activity. Before proceeding, copy and record the URL for your repository. This URL will be needed later. The URL will be in the format: https://github.com/ /satellite-config-example. The user ID and last part of the URL appears in GitHub as illustrated below: Next, learn how to use IBM Cloud Satellite Config to deploy the web application the OpenShift clusters managed by IBM Cloud Satellite.","title":"Setup GitHub repository"},{"location":"3config/03.03%20GitHubConfig/","text":"Now it is time to create a Satellite Config configuration that utilizes the GitOp model to deploy a sample application to a set of OpenShift clusters. For this activity, two OpenShift clusters will be utilized as shown below. The cluster running in IBM Cloud, which has been registered with Satellite config , will be called the development cluster. The cluster running at the Satellite Location, will be called the production cluster. Each of these clusters have been defined in a cluster group: se-l3-development and se-l3-production. Remember, cluster groups can contain one or more clusters, but for this activity each is a single cluster. In an actual client environment, there could be several clusters in both the development and production groups and each could be in different IBM Cloud datacenters or Satellite Locations any where in the world. Take a few minutes to explore the Cluster and Cluster groups pages in the IBM Cloud Portal. Recall, in the IBM Technology Zone (ITZ) environment used in this activity only limited access is provided to users. Specific to Satellite config , users are NOT given permissions to create new clusters, cluster groups, or configurations. As seen above, the 2 cluster groups have already been configured. Additionally, two configurations have also been created for each user. The name of these configurations include a unique user identifier (as described in the previous chapter) and a suffix of -se-l3 and gitconf-se-l3 . If not already open, open a browser window to the Configurations page under IBM Cloud Satellite. Filter or find the 2 pre-provisioned configurations using the unique name created in the ITZ reservation ( 2700039nft in the examples below). Click your unique configuration with the -se-l3 extension in the table. The -se-l3 configuration utilizes the Direct Upload model of Satellite config . It contains a single version that creates a namespace (referred to as a Project * within OpenShift) resource in OpenShift if it does not already exist. The YAML for this version looks like: apiversion : project.openshift.io/v1 description : \"2700039nft-se-l3\" displayName : 2700039nft-se-l3 kind : Project metadata : name : 2700039nft-se-l3 labels : deploy.razee.io/mode : \"EnsureExists\" Click the unique subscription for the configuration in the Subscriptions table. Verify the subscription is deployed to the 2 cluster groups: se-l3-development and se-l3-production. The Rollout status should be Deployed . Next, learn how to bring everything together to prepare for and deliver client facing demonstrations of IBM Cloud Satellite.","title":"Deploy a web app using Sat Config"},{"location":"4demo/04.01%20Introduction/","text":"The previous sections of this activity have created and configured the resources required for client demonstrations. The following demonstration scripts are split to align with two of the key values of IBM Cloud Satellite and to separate out the required elements of the Stand and Deliver for IBM Sales and Technical Sales roles. The first demonstration is focused on the ease of extending IBM Cloud Satellite to a remote location like a 3rd party cloud provider, client on-premises data center, or an edge location, and deploying satellite-enabled IBM Cloud services. This demonstration is like a baking show. The steps to create resources (unbaked) is shown, but instead of waiting for them to provision, the demonstration will shift to using already provisioned (baked) resources. This style of demonstration is used because the process to provision a Satellite Location typically takes 30 minutes or more and significant resources are required. The second demonstration continues from the first to show the capabilities of Satellite Config. In this demonstration, a sample application will be deployed using Satellite Config to remote locations and automatically managed through a GitOps model of application development and operations (DevOps). Each of the following sections provides step-by-step instructions for walking through the above scenarios. Following those steps is the easy part. The harder part of a demonstration is describing and relating the value of what is being done to the client. Sample talking points are provided. In addition, demonstration video of both parts is provided at the end. All sellers should practice their demonstrations several times before performing a live client demonstration or recording their Stand and Delivers. Be prepared for things to go wrong! How would you handle these scenarios? What if the network used to connect to the IBM Cloud portal fails? Try using an alternative network like a cell phone's hot spot. Have a recording of a practice session available that can be used in a worse case scenario. What if the IBM Technology Zone environment reservation expires? Don't let this happen! Make sure the life of the reservation is at least a day after the planned demonstration. This will also provide an opportunity to retrace the demonstration to help remember any client questions that may not have been captured during the actual demonstration. What if the presenter before runs long and the demonstration time is cut from 30 minutes to 15 minutes? Sadly, this is very common. Time management during a demonstration is critical. Be prepared to jump to parts of the demonstration that will most resonate with the audience. Have browser windows preloaded to key interfaces (e.g. IBM Cloud Portal, OpenShift web console, etc.) minimize loading time. Interactive discussions are great, but make sure questions and answers don't impact completing the demonstration. Some questions are best deferred til after the demonstration is complete. And make sure common presentation best practices are followed like: Remove distractions. Mute cell phones, Slack, and anything else that may interrupt the demonstration. For virtual demonstrations, verify the audience is seeing what they should be seeing. Know what you know, and know what you don't know. If the client asks a question that you can't answer respond with \"Let me get back to you on that.\" And then make sure you do! Don't dance, don't guess. Know your audience! Understanding who each person is and their roles will allow the demonstrator to relate what is being shown to the individuals. Understand the clients business and industry so the messaging can be customized to their business problems. Next, follow and learn a prepared script for performing a high-level demonstration of IBM Cloud Satellite that shows how easy it is to deploy a Location and Satellite-enabled services to Satellite locations.","title":"Introduction"},{"location":"4demo/04.02%20GeneralDemo/","text":"The following steps assume all of the prior sections of this activity have been completed. Login to the IBM Cloud portal here: https://cloud.ibm.com and change to the 2435442 - ITZ - Satellite. If introductions have not already been done, now is the time. If the client is not an existing IBM Cloud user, then provide some high level statements about IBM Cloud (e.g. world wide coverage, 300 cloud based services including fully managed Software as a Service (SaaS) offerings, etc.). Navigate to the Satellite Overview page. If earlier discussions were not focused on IBM Cloud Satellite, describe the offering and its values. Leverage the talking points from the IBM Cloud Satellite Client presentation (from the IBM Cloud Satellite Level 2 learning plan). The overview provides some useful descriptions on three topics that will be covered: IBM Cloud services, Application management, and network traffic management. Click the Create a Satellite Location + button. If it is known the client uses a specific cloud provider, focus on that specific provider and how IBM Cloud Satellite provides automated, terraform-based scripts to both provision the remote resources as well as deploying the control plane resources for a Satellite Location. In lieu of the next steps which use the Advanced configuration option, consider creating an account in one of the 3rd party clouds and using those credentials to show the Satellite location provisioning page (see image below for how it looks in AWS). Alternatively, the video in the Provisioning chapter can be used as part of the demonstration to show the process for a Location in AWS. Click the Advanced configuration tile. Notice there is very little information required to create a Satellite location . As learned earlier, the real provisioning work is done by the attach host script that are generated for the location which is executed on each of the physical servers. This will be explored shortly. The key fields on the location creation screen are the Managed from , zone names, support for Red Hat CoreOS, and an object storage bucket. Click the Managed from pull down option. When provisioning a Satellite location , clients should choose the IBM Cloud datacenter that is nearest to the physical servers in the remote location. The hosts attached to the Satellite location control plane must have a low latency connection of less than or equal to 200 milliseconds (<= 200ms) round-trip time (RTT) to the IBM Cloud region that the Satellite location is managed from. Learn more about this requirement here . Depending on the audience, discuss the following topics: Zones - The Zone fields allow the user to specify names used for the network availability zones where control plane and worker nodes will be assigned. High availability (HA) is a key to keeping applications up and running, even after a partial or full site failure. The main purpose of high availability is to eliminate potential points of failures in an infrastructure. Red Hat CoreOS - Enabling Red Hat CoreOS support comes with both pros and cons. A Red Hat CoreOS enabled location unlocks more features such as minimal outbound network requirements, HTTP proxy for outbound traffic, OpenShift virtualization, and single node cluster topology. But it has a higher infrastructure requirement. On the other hand, a non-CoreOS enabled location supports a smaller feature set but can run at a smaller footprint, allowing more clusters per same capacity. For more information about the key benefits of CoreOS, see Red Hat Enterprise Linux CoreOS . IBM Cloud Object Storage - An object storage bucket is required to store data about the Satellite location > and backups of the OpenShift clusters. Once all the required information is provided, a user would click Create location . Users of this IBM Technology Zone (ITZ) environment will NOT have permission to create a location. Inform the client that creating a Satellite location using the advanced configuration method only takes a few minutes, where as using one of the automated approaches for 3rd party cloud providers will take longer as the actual servers are provision in the client's account and the host attach scripts are executed. Click the Locations bread crumb trail at the top of the Advanced configuration page. Inform the audience that a pre-provisioned location will be used to show how hosts are added to the location. Enter yl-l3 in the Locations table search bar and then click the yl-l3-empty-location entry. The Setting up your new location provides the basic flow for adding hosts and setting up the location. Click the Hosts link in left-hand menu. The next step is to add a host to the location. As mentioned earlier, this involves downloading a host attach script and executing that script on each server that is to be added to the location. Click the Attach host + button. In this ITZ environment, access is not provided to generate the script or download the script. If there is a very technical audience, a sample script is located here that can be downloaded and displayed. Continuing with the baking show approach, now show a location that already has hosts attached. Click the Locations bread crumb trail at the top of the hosts page. Enter yl-l3 in the Locations table search bar and then click the yl-l3-vmware entry. The overview page for a Satellite location provides general information about the location and the location's health. Click the Hosts link in left-hand menu. On the Hosts notice that 12 hosts have been added to this location. Initially when added, the host's Availability would be listed as Unassigned . The next step for creating the location would be to assign a minimum of 3 hosts to the Control plane . Control plane hosts do not run any client workloads, rather the location control plane runs resources that are managed by IBM to manage the hosts, clusters, and other resources that you attach to the location. Sizing of the control plane is an important exercise that needs be done early in the planning phase, but keep in mind additional hosts can be added to the control plane at any time by running the attach host script on new servers. Click the Services link in left-hand menu. IBM Cloud Satellite provides clients the ability to run Satellite-enabled services at remote locations. As seen here, Red Hat OpenShift on IBM Cloud, an IBM-managed deployment of OpenShift, has already been deployed at this location. Lets explore how this was done. Click the Create services + button. There are several Satellite-enabled services available in the IBM Cloud catalog and can be easily deployed to a Satellite location . Take a few minutes to highlight each of the available services and the capabilities they provide. Click the Red Hat OpenShift on IBM Cloud tile. With Red Hat OpenShift on IBM Cloud, is a Platform as a Service (PaaS) that provides an IBM managed environment for running Kubernetes resources. These could be client applications and/or IBM offerings like IBM Cloud Paks. As a Satellite-enabled service, the deployment of OpenShift is fully automated. Using the Red Hat OpenShift cluster deployment page, describe the required parameters for the deployment. The key fields to highlight are the Location , number of worker nodes, OpenShift version, licensing, and Satellite Config enablement. Location - The location is pre-selected since the request was to add a service to the yl-l3-vmware location. Worker pool - These settings allow users to specify what availability zones should be used and now many worker nodes should be deployed to each zone as well as the number of virtual CPUs (vCPU) and memory for each worker node. Sizing of the worker pool is a critical activity. Hosts can be added and removed, but it is important to size the pool based upon the planned workloads. OpenShift version - There will typically be 3-4 versions of OpenShift available. As new version's are made available by Red Hat, the older versions will roll off of the selectable list. While Red Hat OpenShift on IBM Cloud is a managed service, there are client responsibilities which include updating the workers nodes. This will be discussed again later. Licensing - OpenShift licensing can be added here or Red Hat OpenShift Cluster Manager can be used by the client to manage the OpenShift licenses. Satellite Config - Satellite config can be enabled for the cluster now, or later by running the register cluster script as described earlier in this activity. Notice the warning that the Minimum host requirements are not met message is displayed. This is due to the fact all the hosts in the location are already utilized. Hosts most be available and in the Unassigned state in order for a new service to be deployed to the location. Once all the required parameters are provided, the Create button would be enabled and the automated deployment could be started. Note, the deployment of OpenShift in this ITZ environment took approximately 30 minutes to complete. When the OpenShift tile was clicked, this provisioning dialog opened in a new browser tab or window. Close this window and return to the Location Services page. Click the x at top right. Click the Link endpoints link in left-hand menu. As described earlier, Link endpoints are used to control and audit network traffic between the IBM Cloud Satellite location and services, servers, and applications that run outside of the location. IBM Cloud Satellite provides clients the ability to integrate with IBM Cloud logging, monitoring, and activity tracking to Link endpoints . These integrations are outside of the scope of this demonstration and access to the dashboards are not provided for this ITZ environment, rather is used by ITZ to monitor and managed the shared environment. Click the Create endpoint + button. There are two types of Link endpoints as described in the earlier chapter on Link endpoints . A Satellite location endpoint specifies that the destination resource runs on a cluster or host in the Satellite location, where as a Cloud endpoint specifies that the destination resources run in IBM Cloud. Depending on the audience and technical comfort with the topic, click the Next button to walk through the information required to create an endpoint. If details are not required, simply describe the Link endpoint as a networking rule that allows in and outbound access over a secure tunnel between the resources at the Satellite location and the outside world over the Internet. The other important resource at a Satellite location is storage. The access controls in this ITZ environment does not provide access to this page in the IBM Cloud portal. Storage configurations . In addition to the storage that may be directly associated with the worker nodes added to a location, additional storage may also be added to the location and made available to the clusters and resources running in the Satellite location . Templates are available for 3rd party cloud storage types (AWS, Azure, Google), various IBM System Storage types, NetApp storage systems, VMware, and OpenShift Data Foundation (ODF). Additionally, Satellite supports bring-your-own storage drivers installed using the OpenShift Catalog, OperatorHub, Helm charts, or by deploying images to the clusters that include the required storage drivers. For more information on **Satellite storage read Understanding Satellite storage . At this point, the creation of a IBM Cloud Satellite location and the deployment of a Satellite-enabled service (Red Hat OpenShift on IBM Cloud) has been demonstrated. Next, follow and learn how to demonstrate the power of IBM Cloud Satellite Config to automate the deployment of Kubernetes services to OpenShift clusters managed by IBM Cloud Satellite.","title":"High level demonstration of IBM Cloud Satellite"},{"location":"4demo/04.03%20DeployDemo/","text":"Now it is time to demonstrate the power of Satellite config . Recall the high-level architecture of the IBM Technology Zone (ITZ) environment as illustrated below. In this part of the demonstration, Satellite config will be used to: deploy the sample application to the Development cluster from the Development branch of the GitHub repository deploy the sample application to the Production cluster from the Production branch of the GitHub repository update the Production deployment of the application using the GitHub Development and Operations (DevOps) model by updating the Development branch in GitHub and initiating GigHub pull request of the Development branch to the Production branch To achieve this, subscriptions need to be created for both the Development and Production branches to deploy the application to the respective OpenShift clusters. Open the Configurations page in the IBM Cloud Portal: https://cloud.ibm.com/satellite/configuration . Use the Search function to display only the configurations you have control over using the Namespace field from the ITZ reservation. Don't see your configurations? Make sure the 2435442 - ITZ - Satellite is selected in the IBM Cloud Portal. Click the Configuration with the -gitconf-se-l3 extension. Click the Create Subscription + button. Enter the URL for your fork of the GitHub repository for the sample code. This is the URL recorded in step 28 in the Setup GitHub repository chapter. ??? question \"Are private GitHub repositories supported? Yes, private GitHub repositories are supported. Additional configuration steps are required to create a **secret** on the target cluster that contains a personal access token with at least **read** access to the private repository. Learn more <a href=\"https://cloud.ibm.com/docs/satellite?topic=satellite-satcon-manage-gitops&interface=ui#create-satconfig-ui-gitops\" target=\"_blank\">here</a>. Enter config-sample-dev in the Branch name text entry field. Enter deployments/*.yaml in the Path text entry field. If not entered automatically, enter config-sample-dev in the Subscription name field . Check the checkbox for the se-l3-development cluster group in the table of cluster groups. !!! hint \"Enter se-l3 in the search field to filter the Cluster Groups table. Click the Create button. Before validating the application is deployed, repeat steps 4 through 10 to create a Subscription for the **config-sample-prod as shown below. Usually, in less than a minute, both subscriptions should show a Rollout status of deployed as shown below. Now, verify the deployments are successful by using the Red Hat OpenShift web console for each of the clusters. Click the hamburger menu icon at to left and then OpenShift and Clusters . Click yl-l3-ibm-roks-2 in the table of clusters. This is the cluster assigned to the se-l3-development cluster group which is the development cluster in this environment. Click the OpenShift web console button at top right. The OpenShift web console will take a few seconds to open in a new browser tab or window. The default view may vary when the web console open. If not already set, select the Developer perspective in the OpenShift web console. 16.Click the Topology option in left-hand menu. Select your unique namespace as shown in the ITZ reservation. In the topology view of your namespace, the sample helloworld-app deployment should be shown. Click the route link icon to open the web page front end to the deployed application. A new browser tab or window should open to the web page front end of the deployed application. Which will look like the following: Return to the browser page for the IBM Cloud Portal and repeat steps 12 through 18 using the yl-l3-vmware-roks-1 cluster which is the OpenShift cluster running in the production environment. Notice the output of both applications is the same! Recall, during the GitHub configuration steps earlier, the contents of the config-sample-dev were copied to the config-sample-prod when the pull request merged the two together. Leave all these windows or tabs open but be sure to track which windows/tabs are the production web page and OpenShift web console, and which are the pages for the development branch. Keeping the windows in order During this demo, several browser windows and tabs will be used. While there are many ways to manage them, consider moving all the developer pages to one browser window including: - IBM Cloud Portal - GitHub repository - OpenShift web console - Sample application web front end And move the two production pages to another browser window: - OpenShift web console - Sample application web front end Then split the two browser windows on the monitor. In the next stage of the demonstration, modify the config-sample-dev web page by editing the 2-helloworld-deployment.yaml file. In your GitHub repository, click the branch pull-down menu and select the config-sample-dev branch. Click the deployments folder. Click the 2-helloworld-deployment.yaml file. Click the pencil icon to edit the file. Scroll to the very last line of the file and change the value attribute from \"1.1\" to \"1.2\" . Do not change any other values and maintain proper spacing Remember, YAML is a very strict language. Make sure all spacing and quotes remain the same. Any string can be used in stead of \"1.2\". The value just needs to be different in order for GitHub to notice the change. Click the Commit changes... button. To see Satellite config in action, complete the next two steps without a long delay between the two. Satellite config runs subscriptions approximately every 5 minutes. When performing a client demonstration, consider building talking points into the time between the next two steps. Click the Commit changes button in the pop-up dialog. Optionally, modify the Commit message text entry field. Return to the OpenShift web console for the yl-l3-ibm-roks-2 cluster ( development ) and click the middle of the helloworld-app . A side window will open with the details of the sample application's deployment. Now observe the two highlighted sections. Several things will be occurring, as seen in the animation below. First Satellite config , at its ~5 minute interval, will notice a change in the GitHub repository for the config-sample-dev repository. It will then process the YAML files just as it did when the subscription was first run. This will deploy the updated 2-helloworld-deployment.yaml to the OpenShift cluster. In OpenShift, as illustrated in the animated give below, a new pod will be created with executing the new deployment with the changes made. This creates a new instance of the application. Once the new pod is running, the old pod is deleted. This process prevents downtime. Click the route link icon to open the web page front end to the deployed application in the **yl-l3-ibm-roks-2 cluster. Notice the string displayed should reflect the change made from the edit of the 2-helloworld-deployment.yaml . Still seeing 1.1? Make sure at least 5 minutes has passed from when the code was changed in GitHub. After 5 minutes, click the deployment route link in the OpenShift web console, or refresh the browser page where teh Hello World application is running. As part of the DevOps process, the next step after modifying and testing any changes made is to perform a pull request from the config-sample-dev to the config-sample-prod . Once the pull request is merged in GitHub, the Satellite config for the **se-l3-production cluster group will be processed. Switch to the browser tab for the config-sample-prod cluster and verify the sample application is still at version 1.1 . Switch to the GitHub browser tab and click the Pull request link. Click the New pull request button. Change the base repository pull-down to your repository. Change the base branch to config-sample-prod and the compare branch to **config-sample-dev. Click the Create pull request button. Once again, click the Create pull request button. Click the Merge pull request button. Click the Confirm merge button. Now that the merge has been performed in GitHub, the changes will be propagated to the se-l3-production cluster group via the Satellite config subscription. Return to the OpenShift web console for the yl-l3-vmware-roks-1 cluster ( production ) and click the middle of the helloworld-app . A side window will open with the details of the sample application's deployment. Just as observed with the development copy of the sample application, the production copy will be updated. A new pod will be created and the old one will be removed. It may take a full 5 minutes before the update occurs. Click the route link icon to open the web page front end to the deployed application in the **yl-l3-vmware-roks-1 cluster. Notice the string displayed should reflect the change made from the edit of the 2-helloworld-deployment.yaml . That concludes to demonstration of Satellite config and how it can be used in conjunction with GitHub and a DevOps process. Continue to the next section to learn how to complete the IBM Cloud Satellite Level 3 learning plan.","title":"Satellite Config demonstration"},{"location":"4demo/04.04%20WatchDemo/","text":"The video below walks through the demonstration scenarios outlined in the previous two chapters and highlights the features and values of IBM Cloud Satellite covered in this activity. This example does not follow the first scenario step-by-step, rather the presenter choose to utilize the videos from the chapter on provisioning a location. Both methods can be affective. In this mock client presentation, the presenter utilizes several assets available in this demonstration guide including: the high level architecture diagrams shown in \"The environment\" and \"Deploy a web app using Sat Config\" chapters the two (2) video demonstrating provisioning a Satellite location in AWS and a location using the manual process These assets were downloaded locally via the web browser by right clicking on the asset and selecting the download option. Both were pre-loaded in an appropriate viewer. Additionally the presenter preloaded most of the web pages that are accessed as part of the demonstration including: IBM Cloud Portal Red Hat OpenShift web console for both the yl-l3-vmware-roks-1 (production) and the {{ no such element: dict object['cluster'] }} (development) clusters. GitHub repository Preloading these pages saves time and allows the presentation to flow smoother by prearranging the browser windows and tabs. When preparing this way, make sure all authentication tokens are valid just before starting the demonstration! Tip If the video appears blurry, click the full screen or icon.","title":"Watch a recorded demonstration example"},{"location":"4demo/_downloads/attachHost-yl-l3-empty-location/","text":"#!/usr/bin/env bash cat << 'HERE' >>/usr/local/bin/ibm-host-attach.sh #!/usr/bin/env bash set -ex mkdir -p /etc/satelliteflags HOST_ASSIGN_FLAG=\"/etc/satelliteflags/hostattachflag\" if [[ -f \"$HOST_ASSIGN_FLAG\" ]]; then echo \"host has already been assigned. need to reload before you try the attach again\" exit 0 fi set +x HOST_QUEUE_TOKEN=\"###\" set -x ACCOUNT_ID=\"###\" CONTROLLER_ID=\"chvknlkd09g7msos5600\" SELECTOR_LABELS='{}' API_URL=\"https://origin.us-south.containers.cloud.ibm.com/\" REGION=\"us-south\" export HOST_QUEUE_TOKEN export ACCOUNT_ID export CONTROLLER_ID export REGION #shutdown known blacklisted services for Satellite (these will break kube) set +e systemctl stop -f iptables.service systemctl disable iptables.service systemctl mask iptables.service systemctl stop -f firewalld.service systemctl disable firewalld.service systemctl mask firewalld.service set -e # ensure you can successfully communicate with redhat mirrors (this is a prereq to the rest of the automation working) if [[ $(grep -ic \"maipo\" < /etc/redhat-release) -ne 0 ]]; then #RHEL 7 OPERATING_SYSTEM=\"RHEL7\" elif [[ $(grep -ic \"ootpa\" < /etc/redhat-release) -ne 0 ]]; then #RHEL 8 OPERATING_SYSTEM=\"RHEL8\" elif grep -qi \"coreos\" < /etc/redhat-release; then OPERATING_SYSTEM=\"RHCOS\" else OPERATING_SYSTEM=\"UNKNOWN\" fi if [[ \"${OPERATING_SYSTEM}\" != \"RHEL7\" && \"${OPERATING_SYSTEM}\" != \"RHEL8\" ]]; then echo \"This script is only intended to run with a RHEL7 or RHEL8 operating system. Current operating system ${OPERATING_SYSTEM}.\" exit 1 fi export OPERATING_SYSTEM if [[ \"${OPERATING_SYSTEM}\" == \"RHEL7\" ]]; then yum install rh-python36 -y # shellcheck disable=SC1091 source /opt/rh/rh-python36/enable elif [[ \"${OPERATING_SYSTEM}\" == \"RHEL8\" ]]; then yum install python39 -y fi mkdir -p /etc/satellitemachineidgeneration if [[ ! -f /etc/satellitemachineidgeneration/machineidgenerated ]]; then rm -f /etc/machine-id systemd-machine-id-setup if openssl rand -hex 16; then openssl rand -hex 16 > /etc/machine-id fi touch /etc/satellitemachineidgeneration/machineidgenerated fi #STEP 1: GATHER INFORMATION THAT WILL BE USED TO REGISTER THE HOST HOSTNAME=$(hostname -s) HOSTNAME=${HOSTNAME,,} MACHINE_ID=$(cat /etc/machine-id) CPUS=$(nproc) MEMORY=$(grep MemTotal /proc/meminfo | awk '{print $2}') export CPUS export MEMORY if [[ \"${OPERATING_SYSTEM}\" != \"RHEL7\" && \"${OPERATING_SYSTEM}\" != \"RHEL8\" ]]; then echo \"This script is only intended to run with a RHEL7 or RHEL8 operating system. Current operating system ${OPERATING_SYSTEM}. Going to continue on for backwards compatibility\" fi SELECTOR_LABELS=$(echo \"${SELECTOR_LABELS}\" | python3 -c \"import sys, json, os; z = json.load(sys.stdin); y = {\\\"cpu\\\": os.getenv('CPUS'), \\\"memory\\\": os.getenv('MEMORY'), \\\"os\\\": os.getenv('OPERATING_SYSTEM')}; z.update(y); print(json.dumps(z))\") set +e export ZONE=\"\" export PROVIDER=\"\" export TOKEN=\"\" echo \"Probing for AWS metadata\" gather_aws_token() { HTTP_RESPONSE=$(curl --write-out \"HTTPSTATUS:%{http_code}\" --max-time 10 -X PUT \"http://169.254.169.254/latest/api/token\" -H \"X-aws-ec2-metadata-token-ttl-seconds: 21600\") HTTP_STATUS=$(echo \"$HTTP_RESPONSE\" | tr -d '\\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\\1/') HTTP_BODY=$(echo \"$HTTP_RESPONSE\" | sed -E 's/HTTPSTATUS\\:[0-9]{3}$//') if [[ \"$HTTP_STATUS\" -ne 200 ]]; then echo \"bad return code\" return 1 fi if [[ -z \"$HTTP_BODY\" ]]; then echo \"no token found\" return 1 fi echo \"found aws access token\" TOKEN=\"$HTTP_BODY\" } gather_zone_info() { HTTP_RESPONSE=$(curl --write-out \"HTTPSTATUS:%{http_code}\" --max-time 10 -H \"X-aws-ec2-metadata-token: $TOKEN\" http://169.254.169.254/latest/meta-data/placement/availability-zone) HTTP_STATUS=$(echo \"$HTTP_RESPONSE\" | tr -d '\\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\\1/') HTTP_BODY=$(echo \"$HTTP_RESPONSE\" | sed -E 's/HTTPSTATUS\\:[0-9]{3}$//') # if a 401 retry without auth if [[ \"$HTTP_STATUS\" -eq 401 ]]; then echo \"unable to get aws metadata with v2 metadata service, trying v1...\" HTTP_RESPONSE=$(curl --write-out \"HTTPSTATUS:%{http_code}\" --max-time 10 http://169.254.169.254/latest/meta-data/placement/availability-zone) HTTP_STATUS=$(echo \"$HTTP_RESPONSE\" | tr -d '\\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\\1/') HTTP_BODY=$(echo \"$HTTP_RESPONSE\" | sed -E 's/HTTPSTATUS\\:[0-9]{3}$//') fi if [[ \"$HTTP_STATUS\" -ne 200 ]]; then echo \"bad return code\" return 1 fi if [[ \"$HTTP_BODY\" =~ [^a-zA-Z0-9-] ]]; then echo \"invalid zone format\" return 1 fi ZONE=\"$HTTP_BODY\" } gather_aws_info() { if ! gather_aws_token; then return 1 fi if ! gather_zone_info; then return 1 fi } if gather_aws_info; then echo \"aws metadata detected\" PROVIDER=\"aws\" fi if [[ -z \"$ZONE\" ]]; then echo \"echo Probing for Azure Metadata\" export LOCATION_INFO=\"\" export AZURE_ZONE_NUMBER_INFO=\"\" gather_location_info() { HTTP_RESPONSE=$(curl -H Metadata:true --noproxy \"*\" --write-out \"HTTPSTATUS:%{http_code}\" --max-time 10 \"http://169.254.169.254/metadata/instance/compute/location?api-version=2021-01-01&format=text\") HTTP_STATUS=$(echo \"$HTTP_RESPONSE\" | tr -d '\\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\\1/') HTTP_BODY=$(echo \"$HTTP_RESPONSE\" | sed -E 's/HTTPSTATUS\\:[0-9]{3}$//') if [[ \"$HTTP_STATUS\" -ne 200 ]]; then echo \"bad return code\" return 1 fi if [[ \"$HTTP_BODY\" =~ [^a-zA-Z0-9-] ]]; then echo \"invalid format\" return 1 fi LOCATION_INFO=\"$HTTP_BODY\" } gather_azure_zone_number_info() { HTTP_RESPONSE=$(curl -H Metadata:true --noproxy \"*\" --write-out \"HTTPSTATUS:%{http_code}\" --max-time 10 \"http://169.254.169.254/metadata/instance/compute/zone?api-version=2021-01-01&format=text\") HTTP_STATUS=$(echo \"$HTTP_RESPONSE\" | tr -d '\\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\\1/') HTTP_BODY=$(echo \"$HTTP_RESPONSE\" | sed -E 's/HTTPSTATUS\\:[0-9]{3}$//') if [[ \"$HTTP_STATUS\" -ne 200 ]]; then echo \"bad return code\" return 1 fi if [[ \"$HTTP_BODY\" =~ [^a-zA-Z0-9-] ]]; then echo \"invalid format\" return 1 fi AZURE_ZONE_NUMBER_INFO=\"$HTTP_BODY\" } gather_zone_info() { if ! gather_location_info; then return 1 fi if ! gather_azure_zone_number_info; then return 1 fi if [[ -n \"$AZURE_ZONE_NUMBER_INFO\" ]]; then ZONE=\"${LOCATION_INFO}-${AZURE_ZONE_NUMBER_INFO}\" else ZONE=\"${LOCATION_INFO}\" fi } if gather_zone_info; then echo \"azure metadata detected\" PROVIDER=\"azure\" fi fi if [[ -z \"$ZONE\" ]]; then echo \"echo Probing for GCP Metadata\" gather_zone_info() { HTTP_RESPONSE=$(curl --write-out \"HTTPSTATUS:%{http_code}\" --max-time 10 \"http://metadata.google.internal/computeMetadata/v1/instance/zone\" -H \"Metadata-Flavor: Google\") HTTP_STATUS=$(echo \"$HTTP_RESPONSE\" | tr -d '\\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\\1/') HTTP_BODY=$(echo \"$HTTP_RESPONSE\" | sed -E 's/HTTPSTATUS\\:[0-9]{3}$//') if [[ \"$HTTP_STATUS\" -ne 200 ]]; then echo \"bad return code\" return 1 fi POTENTIAL_ZONE_RESPONSE=$(echo \"$HTTP_BODY\" | awk -F '/' '{print $NF}') if [[ \"$POTENTIAL_ZONE_RESPONSE\" =~ [^a-zA-Z0-9-] ]]; then echo \"invalid zone format\" return 1 fi ZONE=\"$POTENTIAL_ZONE_RESPONSE\" } if gather_zone_info; then echo \"gcp metadata detected\" PROVIDER=\"google\" fi fi set -e if [[ -n \"$ZONE\" ]]; then SELECTOR_LABELS=$(echo \"${SELECTOR_LABELS}\" | python3 -c \"import sys, json, os; z = json.load(sys.stdin); y = {\\\"zone\\\": os.getenv('ZONE')}; z.update(y); print(json.dumps(z))\") fi if [[ -n \"$PROVIDER\" ]]; then SELECTOR_LABELS=$(echo \"${SELECTOR_LABELS}\" | python3 -c \"import sys, json, os; z = json.load(sys.stdin); y = {\\\"provider\\\": os.getenv('PROVIDER')}; z.update(y); print(json.dumps(z))\") fi #Step 2: SETUP METADATA cat <<EOF >register.json { \"controller\": \"$CONTROLLER_ID\", \"name\": \"$HOSTNAME\", \"identifier\": \"$MACHINE_ID\", \"labels\": $SELECTOR_LABELS } EOF set +e #try to download and run host health check script set +x #first try to the satellite-health service is enabled HTTP_RESPONSE=$(curl --write-out \"HTTPSTATUS:%{http_code}\" --retry 5 --retry-delay 10 --retry-max-time 60 \\ \"${API_URL}satellite-health/api/v1/hello\") set -x HTTP_BODY=$(echo \"$HTTP_RESPONSE\" | sed -E 's/HTTPSTATUS\\:[0-9]{3}$//') HTTP_STATUS=$(echo \"$HTTP_RESPONSE\" | tr -d '\\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\\1/') echo \"$HTTP_STATUS\" if [[ \"$HTTP_STATUS\" -eq 200 ]]; then set +x HTTP_RESPONSE=$(curl --write-out \"HTTPSTATUS:%{http_code}\" --retry 20 --retry-delay 10 --retry-max-time 360 \\ \"${API_URL}satellite-health/sat-host-check\" -o /usr/local/bin/sat-host-check) set -x HTTP_BODY=$(echo \"$HTTP_RESPONSE\" | sed -E 's/HTTPSTATUS\\:[0-9]{3}$//') HTTP_STATUS=$(echo \"$HTTP_RESPONSE\" | tr -d '\\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\\1/') echo \"$HTTP_BODY\" echo \"$HTTP_STATUS\" if [[ \"$HTTP_STATUS\" -eq 200 ]]; then chmod +x /usr/local/bin/sat-host-check set +x timeout 5m /usr/local/bin/sat-host-check --region $REGION --endpoint $API_URL set -x else echo \"Error downloading host health check script [HTTP status: $HTTP_STATUS]\" fi else echo \"Skipping downloading host health check script [HTTP status: $HTTP_STATUS]\" fi set -e set +x #STEP 3: REGISTER HOST TO THE HOSTQUEUE. NEED TO EVALUATE HTTP STATUS 409 EXISTS, 201 created. ALL OTHERS FAIL. HTTP_RESPONSE=$(curl --write-out \"HTTPSTATUS:%{http_code}\" --retry 100 --retry-delay 10 --retry-max-time 1800 -X POST \\ -H \"X-Auth-Hostqueue-APIKey: $HOST_QUEUE_TOKEN\" \\ -H \"X-Auth-Hostqueue-Account: $ACCOUNT_ID\" \\ -H \"Content-Type: application/json\" \\ -d @register.json \\ \"${API_URL}v2/multishift/hostqueue/host/register\") set -x HTTP_BODY=$(echo \"$HTTP_RESPONSE\" | sed -E 's/HTTPSTATUS\\:[0-9]{3}$//') HTTP_STATUS=$(echo \"$HTTP_RESPONSE\" | tr -d '\\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\\1/') echo \"$HTTP_BODY\" echo \"$HTTP_STATUS\" if [[ \"$HTTP_STATUS\" -ne 201 ]]; then echo \"Error [HTTP status: $HTTP_STATUS]\" exit 1 fi HOST_ID=$(echo \"$HTTP_BODY\" | python3 -c \"import sys, json; print(json.load(sys.stdin)['id'])\") #STEP 4: WAIT FOR MEMBERSHIP TO BE ASSIGNED while true; do set +ex ASSIGNMENT=$(curl --retry 100 --retry-delay 10 --retry-max-time 1800 -G -X GET \\ -H \"X-Auth-Hostqueue-APIKey: $HOST_QUEUE_TOKEN\" \\ -H \"X-Auth-Hostqueue-Account: $ACCOUNT_ID\" \\ -d controllerID=\"$CONTROLLER_ID\" \\ -d hostID=\"$HOST_ID\" \\ \"${API_URL}v2/multishift/hostqueue/host/getAssignment\") set -ex isAssigned=$(echo \"$ASSIGNMENT\" | python3 -c \"import sys, json; print(json.load(sys.stdin)['isAssigned'])\" | awk '{print tolower($0)}') if [[ \"$isAssigned\" == \"true\" ]]; then break fi if [[ \"$isAssigned\" != \"false\" ]]; then echo \"unexpected value for assign retrying\" fi sleep 10 done #STEP 5: ASSIGNMENT HAS BEEN MADE. SAVE SCRIPT AND RUN echo \"$ASSIGNMENT\" | python3 -c \"import sys, json; print(json.load(sys.stdin)['script'])\" >/usr/local/bin/ibm-host-agent.sh export HOST_ID ASSIGNMENT_ID=$(echo \"$ASSIGNMENT\" | python3 -c \"import sys, json; print(json.load(sys.stdin)['id'])\") cat <<EOF >/etc/satelliteflags/ibm-host-agent-vars export HOST_ID=${HOST_ID} export ASSIGNMENT_ID=${ASSIGNMENT_ID} EOF chmod 0600 /etc/satelliteflags/ibm-host-agent-vars chmod 0700 /usr/local/bin/ibm-host-agent.sh cat <<EOF >/etc/systemd/system/ibm-host-agent.service [Unit] Description=IBM Host Agent Service After=network.target [Service] Environment=\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" ExecStart=/usr/local/bin/ibm-host-agent.sh Restart=on-failure RestartSec=5 [Install] WantedBy=multi-user.target EOF chmod 0644 /etc/systemd/system/ibm-host-agent.service systemctl daemon-reload systemctl start ibm-host-agent.service touch \"$HOST_ASSIGN_FLAG\" HERE chmod 0700 /usr/local/bin/ibm-host-attach.sh cat << 'EOF' >/etc/systemd/system/ibm-host-attach.service [Unit] Description=IBM Host Attach Service After=network.target [Service] Environment=\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\" ExecStart=/usr/local/bin/ibm-host-attach.sh Restart=on-failure RestartSec=5 [Install] WantedBy=multi-user.target EOF chmod 0644 /etc/systemd/system/ibm-host-attach.service systemctl daemon-reload systemctl enable ibm-host-attach.service systemctl start ibm-host-attach.service","title":"attachHost yl l3 empty location"}]}