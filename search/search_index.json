{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"NextSteps/","text":"","title":"Next Steps"},{"location":"1setup/01.01%20Introduction/","text":"","title":"The environment"},{"location":"1setup/01.02%20Pre-requisites/","text":"","title":"Pre-requisites"},{"location":"1setup/01.03%20CreateReservation/","text":"","title":"Create environment reservation"},{"location":"1setup/01.04%20SetupGitHub/","text":"The steps below assume a working knowledge of GitHub. To complete the exercise, you can utilize either your public GitHub identification, or for IBM employees, your IBM Enterprise GitHub ID. The directions below are based on using your public GitHub identification. Log in to GitHub by opening a browser window to https://github.com/login . Note If you do not already have a GitHub user ID, you can create a free one by clicking the Create an account link on the sign in page. Open a browser window to https://github.com/IBM/satellite-config-example . Click the Fork button. Uncheck the Copy the main branch only checkbox and click Create fork . The browser should redirect to the new repository in your GitHub workspace. Select the config-sample-dev branch in the branch pull-down menu. Click the deployments folder. Next, update each of the four (4) YAML files with the namespace created specifically for you in the IBM Technology Zone (ITZ) environment. The namespace name can be found on the ITZ reservation page (see the example below) or in the e-mail sent by ITZ for the reservation. The value will be in the format \"######ABCD-ns-se-l3\". In the images below \"2700039nft-ns-se-l3\" is used, but you must use your specific value in order to successfully complete this exercise . Why am I doing this? Because the ITZ environment is shared by all users of this demonstration guide, a common namespace cannot be used or else users would overwrite each other and cause issues when attempting to follow the instructions. Each ITZ reservation sets up a unique namespace for each user. By changing this value in the deployment YAML files for the sample application, each user is able to deploy their own copy of the application in the OpenShift clusters managed by IBM Cloud Satellite. Sample ITZ reservation page: Sample ITZ e-mail: Click the 1-helloworld-namespace.yaml file in the deployments directory. Edit the file by clicking the pencil ( ) icon. Change the value of the name field to the name of your ITZ-created namespace, remove the name: satellite-config-sample line under the labels section, and add the line deploy.razee.io/mode: \"EnsureExists\" under the labels section as shown below. Formatting in YAML is important The YAML language is very sensitive to formatting. Make sure each line aligns as illustrated in the image above. Use spaces and not tabs (2 spaces before name: and labels: and 4 spaces before deploy.razee.io/mode: ). Because the namespace is already created for you by the ITZ reservation, the deploy.razee.io/mode: \"EnsureExists\" label tells Satellite config to ignore this step if the namespace already exists. Click Commit changes... . Update the Commit message text field with an appropriate message and then click the Commit changes button. Click deployments to navigate back to the list of YAML files. Next, the other three (3) YAML files need to be updated. For each of these, only the namespace field needs to be updated. The next set of steps walk you through updating one of the files, but you must do it for all three files: 2-helloworld-deployment.yaml 3-helloworld-route.yaml 4-helloworld-svc.yaml Click the 2-helloworld-deployment.yaml file name. Edit the file by clicking the pencil ( ) icon. Change the namespace field from satellite-config-sample to your ITZ specific namespace name. Do not use 2700039nft-ns-se-l3 You must use the namespace name created specifically for you as shown in your ITZ reservation! Click the Commit changes... button. Update the Commit message text field with an appropriate message and then click the Commit changes button. Click deployments to navigate back to the list of YAML files. Repeat steps 13-18 for each of the other 2 files in the deployments directory: 3-helloworld-route.yaml 4-helloworld-svc.yaml For this demonstration, 2 branches in GitHub are used: development (dev) and production (prod). The changes just made in the dev branch need to be made in the prod branch as well. This can be done manually using the steps above, or a pull request can be completed to copy all changes from the dev branch to the prod branch. This process will be used in the demonstration as well, so instead of manually making the changes, lets practice doing a pull request. Click the Pull requests link at the top of the GitHub page. Click the New pull request button. Change the base repository field from IBM/satellite-config-example to your GitHub fork of the repository. Select your repository fork!!! Change the base field from main to config-sample-prod and the compare field from main to config-sample-dev . This will tell GitHub to pull all changes in the dev branch into the prod branch. Verify the pull request can be merged, and click Create pull request . Enter a comment for the request and click Create pull request . Review the changes that are being made with the pull request and click Merge pull request . Click Confirm merge to perform the merging of the dev and prod branches. Verify the changes in the prod branch. Click the <> Code link and then change the branch pulldown menu to config-sample-prod . Notice the status above the table. It should reflect the recent merge of the pull request. You can also view the changes to each file by clicking the deployments directory and viewing the individual YAML files. To summarize, at this point you have copied (forked) sample code from one GitHub repository to your a personal repository and updated the associated YAML files that will be used to deploy the sample application for both the dev and prod branches. In the next section, ....","title":"Setup GitHub repository"},{"location":"2provisioning/02.01%20Locations/","text":"","title":"Locations"},{"location":"2provisioning/02.02%20Services/","text":"","title":"Satellite-enabled services"},{"location":"2provisioning/02.03%20LinkEndpoints/","text":"","title":"Link endpoints"},{"location":"3config/03.01%20IntroAndTerms/","text":"","title":"Introduction and terminology"},{"location":"3config/03.02%20GitHubConfig/","text":"","title":"Create a GitHub-based config and subscriptions"},{"location":"4demo/04.01%20Introduction/","text":"","title":"Introduction"},{"location":"4demo/04.02%20GeneralDemo/","text":"","title":"General demonstration"},{"location":"4demo/04.03%20DeployDemo/","text":"","title":"Deploying applications from GitHub"}]}